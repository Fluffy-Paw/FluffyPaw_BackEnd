// <auto-generated />
using System;
using FluffyPaw_Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FluffyPaw_Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7693), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "4CC311E68571B9DB7EE9811B2D0215C97B48824469D3BF110875C97F63A90071CE2358E142222190D91A1D7C5E7DA6E4816052D5DF41B050CA01C7112BB48176",
                            RoleName = "Admin",
                            Status = 1,
                            Username = "FluffyPaw"
                        },
                        new
                        {
                            Id = 2L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7709), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "StoreManager",
                            Status = 1,
                            Username = "test1"
                        },
                        new
                        {
                            Id = 3L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7713), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "StoreManager",
                            Status = 1,
                            Username = "test2"
                        },
                        new
                        {
                            Id = 4L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7717), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "Staff",
                            Status = 1,
                            Username = "test3"
                        },
                        new
                        {
                            Id = 5L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7723), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "Staff",
                            Status = 1,
                            Username = "test4"
                        },
                        new
                        {
                            Id = 6L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7726), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "PetOwner",
                            Status = 1,
                            Username = "test5"
                        },
                        new
                        {
                            Id = 7L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7729), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "PetOwner",
                            Status = 1,
                            Username = "test6"
                        },
                        new
                        {
                            Id = 8L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7733), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "Staff",
                            Status = 1,
                            Username = "test7"
                        },
                        new
                        {
                            Id = 9L,
                            Avatar = "https://d1hjkbq40fs2x4.cloudfront.net/2016-01-31/files/1045.jpg",
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(7737), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "test@gmail.com",
                            Password = "2757CB3CAFC39AF451ABB2697BE79B4AB61D63D74D85B0418629DE8C26811B529F3F3780D0150063FF55A2BEEE74C4EC102A2A2731A1F1F7F10D473AD18A6A87",
                            RoleName = "Staff",
                            Status = 1,
                            Username = "test8"
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.BehaviorCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BehaviorCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Không"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Chạy vòng tròn trước khi nằm xuống"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Liếm mặt chủ"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Rung lắc đuôi khi vui mừng"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Gầm gừ khi cảm thấy bị đe dọa"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Cào móng để đánh dấu lãnh thổ"
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CheckOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("CheckOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Checkin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("CheckinTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PetId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("StoreServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("StoreServiceId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CheckOut = false,
                            Checkin = false,
                            CheckinTime = new DateTimeOffset(new DateTime(2024, 11, 18, 3, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8732), new TimeSpan(0, 7, 0, 0, 0)),
                            Cost = 100000.0,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8738), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "test",
                            EndTime = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8741), new TimeSpan(0, 7, 0, 0, 0)),
                            PaymentMethod = "PayOS",
                            PetId = 1L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8739), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Accepted",
                            StoreServiceId = 1L
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.BookingRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("PetOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PetOwnerId");

                    b.ToTable("BookingRatings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BookingId = 1L,
                            Description = "test",
                            PetOwnerId = 1L,
                            Vote = 5
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BrandEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessLicense")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Hotline")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MST")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 2L,
                            Address = "A đường AA tổ AAA",
                            BrandEmail = "test1@gmail.com",
                            BusinessLicense = "https://gray-wnem-prod.gtv-cdn.com/resizer/v2/ZRIYMJKRXFG4NGEORU4Z7MVE4U.png?auth=ca7b7f352a656d265f22b46ca0a9b36c6ecdb78546fc48e2cb1f260980998bd4&width=980&height=690&smart=true",
                            Hotline = "0123456789",
                            Logo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRsGufmy584u5_GDdLQaFiguxn8Qc5ILIZ7yA&s",
                            MST = "AAAAAAAAAAAA",
                            Name = "BrandA",
                            Status = true
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 3L,
                            Address = "B đường BB tổ BBB",
                            BrandEmail = "test1@gmail.com",
                            BusinessLicense = "https://homeontherangepetsit.com/____impro/1/onewebmedia/2023%20Business%20License.jpg?etag=%22133c38-63fb9a14%22&sourceContentType=image%2Fjpeg&ignoreAspectRatio&resize=2000,1256&quality=85",
                            Hotline = "0123456788",
                            Logo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSxTepBxTlZftnBKdB6N4gQdZLF0W8ISlHdkA&s",
                            MST = "BBBBBBBBBBBB",
                            Name = "BrandB",
                            Status = true
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Certificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "none",
                            File = "test",
                            Name = "Certificate of Excellence in Pet Grooming",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Description = "none",
                            File = "test",
                            Name = "Certificate of Excellence in Pet Grooming",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Description = "none",
                            File = "test",
                            Name = "Certificate of Excellence in Pet Vaccine",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Description = "none",
                            File = "test",
                            Name = "Certificate of Excellence in Pet Hotel",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            Description = "none",
                            File = "test",
                            Name = "Certificate of Excellence in Pet Hotel",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            Description = "none",
                            File = "test",
                            Name = "Certificate of Excellence in Pet Hotel",
                            ServiceId = 3L
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CloseAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastMessage")
                        .HasColumnType("longtext");

                    b.Property<long>("PoAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("StaffAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CloseAccountId");

                    b.HasIndex("PoAccountId");

                    b.HasIndex("StaffAccountId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.ConversationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ReplyMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReplyMessageId");

                    b.ToTable("ConversationMessages");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Files", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Identification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Back")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Front")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Identifications");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.MessageFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageFiles");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Pet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Allergy")
                        .HasColumnType("longtext");

                    b.Property<long>("BehaviorCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Decription")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsNeuter")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MicrochipNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PetOwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PetTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BehaviorCategoryId");

                    b.HasIndex("PetOwnerId");

                    b.HasIndex("PetTypeId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Allergy = "none",
                            BehaviorCategoryId = 1L,
                            Decription = "test",
                            Dob = new DateTimeOffset(new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            IsNeuter = true,
                            MicrochipNumber = "none",
                            Name = "LuLu",
                            PetOwnerId = 1L,
                            PetTypeId = 1L,
                            Sex = "Male",
                            Status = "Available",
                            Weight = 6.5f
                        },
                        new
                        {
                            Id = 2L,
                            Allergy = "none",
                            BehaviorCategoryId = 2L,
                            Decription = "test1",
                            Dob = new DateTimeOffset(new DateTime(2022, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            IsNeuter = false,
                            MicrochipNumber = "none",
                            Name = "MeowMeow",
                            PetOwnerId = 2L,
                            PetTypeId = 18L,
                            Sex = "Female",
                            Status = "Unavailable",
                            Weight = 5f
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.PetCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PetCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Dog"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Cat"
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.PetOwner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Reputation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PetOwners");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 6L,
                            Address = "243/5 Đ. Nguyễn Tri Phương, Chánh Nghĩa, Thủ Dầu Một, Bình Dương, Việt Nam",
                            Dob = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8087), new TimeSpan(0, 7, 0, 0, 0)),
                            FullName = "Test",
                            Gender = "Male",
                            Phone = "1234567890",
                            Reputation = "Good"
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 7L,
                            Address = "243/5 Đ. Nguyễn Tri Phương, Chánh Nghĩa, Thủ Dầu Một, Bình Dương, Việt Nam",
                            Dob = new DateTimeOffset(new DateTime(2024, 11, 18, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8091), new TimeSpan(0, 7, 0, 0, 0)),
                            FullName = "Test",
                            Gender = "Male",
                            Phone = "0123456789",
                            Reputation = "Good"
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.PetType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PetCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PetCategoryId");

                    b.ToTable("PetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Image = "none",
                            Name = "Chó Chihuahua",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Image = "none",
                            Name = "Chó Bắc Kinh",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Image = "none",
                            Name = "Chó Bắc Kinh lai Nhật",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Image = "none",
                            Name = "Chó Dachshund (Lạp Xưởng/Xúc Xích)",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            Image = "none",
                            Name = "Chó Phú Quốc",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Image = "none",
                            Name = "Chó Poodle",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            Image = "none",
                            Name = "Chó Pug",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Image = "none",
                            Name = "Chó Alaska",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            Image = "none",
                            Name = "Chó Husky",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Image = "none",
                            Name = "Chó Samoyed",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            Image = "none",
                            Name = "Chó Pomeranian (Phốc sóc)",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            Image = "none",
                            Name = "Chó Beagle",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            Image = "none",
                            Name = "Chó Shiba Inu",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 14L,
                            Image = "none",
                            Name = "Chó Golden Retriever",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 15L,
                            Image = "none",
                            Name = "Chó Becgie",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 16L,
                            Image = "none",
                            Name = "Chó Corgi",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 17L,
                            Image = "none",
                            Name = "Chó Mông Cộc",
                            PetCategoryId = 1L
                        },
                        new
                        {
                            Id = 18L,
                            Image = "none",
                            Name = "Mèo Xiêm",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 19L,
                            Image = "none",
                            Name = "Mèo Anh lông ngắn",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 20L,
                            Image = "none",
                            Name = "Mèo Anh lông dài",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 21L,
                            Image = "none",
                            Name = "Mèo Ai Cập",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 22L,
                            Image = "none",
                            Name = "Mèo Ba Tư",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 23L,
                            Image = "none",
                            Name = "Mèo Bali",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 24L,
                            Image = "none",
                            Name = "Mèo Bengal",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 25L,
                            Image = "none",
                            Name = "Mèo Scottish Fold",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 26L,
                            Image = "none",
                            Name = "Mèo Munchkin",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 27L,
                            Image = "none",
                            Name = "Mèo mướp",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 28L,
                            Image = "none",
                            Name = "Mèo Ragdoll",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 29L,
                            Image = "none",
                            Name = "Mèo Maine Coon",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 30L,
                            Image = "none",
                            Name = "Mèo Angora",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 31L,
                            Image = "none",
                            Name = "Mèo Laperm",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 32L,
                            Image = "none",
                            Name = "Mèo Somali",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 33L,
                            Image = "none",
                            Name = "Mèo Toyger",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 34L,
                            Image = "none",
                            Name = "Mèo Turkish Van",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 35L,
                            Image = "none",
                            Name = "Mèo Miến Điện",
                            PetCategoryId = 2L
                        },
                        new
                        {
                            Id = 36L,
                            Image = "none",
                            Name = "Mèo Exotic",
                            PetCategoryId = 2L
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("ReportCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TargetId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 18, 3, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8059), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "None",
                            ReportCategoryId = 9L,
                            SenderId = 7L,
                            Status = true,
                            TargetId = 4L
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.ReportCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ReportCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Tên đặt nhạy cảm",
                            Type = "General"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Hủy book quá nhiều lần cho một dịch vụ - Book xong hủy liên tục",
                            Type = "Staff"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Report sai thông tin",
                            Type = "Staff"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Nội dung phản cảm, Hình ảnh & ngôn từ nhạy cảm",
                            Type = "Staff"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Thông tin sai sự thật, lừa đảo",
                            Type = "Staff"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Nghi vấn buôn bán động vật trái phép",
                            Type = "Staff"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Khác",
                            Type = "Staff"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Dịch bị cấm buôn bán (nhằm mục đích trao đổi vật quý hiếm, hoang dã, 18+,....)",
                            Type = "PetOwner"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Dịch vụ có dấu hiệu lừa đảo",
                            Type = "PetOwner"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Dịch vụ gây ảnh hưởng/ tác động tiêu cực đến người dùng hoặc thú cưng",
                            Type = "PetOwner"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Hình ảnh không rõ ràng, sai sự thật, phản cảm,....",
                            Type = "PetOwner"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Dịch vụ có dấu hiệu tăng đơn ảo.",
                            Type = "PetOwner"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Khác",
                            Type = "PetOwner"
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BookingCount")
                        .HasColumnType("int");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("TotalRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BookingCount = 1,
                            BrandId = 1L,
                            Cost = 100000.0,
                            Description = "test",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Image = "https://phongkhamthuythithipet.com/wp-content/uploads/2024/07/dich-vu-cham-soc-lam-dep-cho-thu-cung.jpg",
                            Name = "Pet Grooming",
                            ServiceTypeId = 1L,
                            Status = true,
                            TotalRating = 0f
                        },
                        new
                        {
                            Id = 2L,
                            BookingCount = 0,
                            BrandId = 1L,
                            Cost = 200000.0,
                            Description = "test",
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Image = "https://hillcrestvets.co.za/wp-content/uploads/2020/10/Pet-Vaccinations.jpg",
                            Name = "Vaccine",
                            ServiceTypeId = 2L,
                            Status = true,
                            TotalRating = 0f
                        },
                        new
                        {
                            Id = 3L,
                            BookingCount = 0,
                            BrandId = 2L,
                            Cost = 100000.0,
                            Description = "test",
                            Duration = new TimeSpan(0, 23, 0, 0, 0),
                            Image = "https://bizweb.dktcdn.net/thumb/1024x1024/100/092/840/products/14b275e8-4ef4-4f5e-b5fb-c11243dbae1a.jpg?v=1677488701687",
                            Name = "Hotel for your Boss",
                            ServiceTypeId = 3L,
                            Status = true,
                            TotalRating = 0f
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.ServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Grooming"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Vaccine"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Hotel"
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OperatingLicense")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("TotalRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BrandId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 4L,
                            Address = "157a Chòm Sao, Hưng Định, Thuận An, Bình Dương 098300, Việt Nam",
                            BrandId = 1L,
                            Name = "Chi nhánh A",
                            OperatingLicense = "https://homeontherangepetsit.com/____impro/1/onewebmedia/2023%20Business%20License.jpg?etag=%22133c38-63fb9a14%22&sourceContentType=image%2Fjpeg&ignoreAspectRatio&resize=2000,1256&quality=85",
                            Phone = "0123456789",
                            Status = true,
                            TotalRating = 5f
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 5L,
                            Address = "157a Chòm Sao, Hưng Định, Thuận An, Bình Dương 098300, Việt Nam",
                            BrandId = 1L,
                            Name = "Chi nhánh B",
                            OperatingLicense = "https://homeontherangepetsit.com/____impro/1/onewebmedia/2023%20Business%20License.jpg?etag=%22133c38-63fb9a14%22&sourceContentType=image%2Fjpeg&ignoreAspectRatio&resize=2000,1256&quality=85",
                            Phone = "0123456789",
                            Status = true,
                            TotalRating = 4f
                        },
                        new
                        {
                            Id = 3L,
                            AccountId = 8L,
                            Address = "157a Chòm Sao, Hưng Định, Thuận An, Bình Dương 098300, Việt Nam",
                            BrandId = 2L,
                            Name = "Chi nhánh C",
                            OperatingLicense = "https://homeontherangepetsit.com/____impro/1/onewebmedia/2023%20Business%20License.jpg?etag=%22133c38-63fb9a14%22&sourceContentType=image%2Fjpeg&ignoreAspectRatio&resize=2000,1256&quality=85",
                            Phone = "0123456789",
                            Status = true,
                            TotalRating = 3f
                        },
                        new
                        {
                            Id = 4L,
                            AccountId = 9L,
                            Address = "157a Chòm Sao, Hưng Định, Thuận An, Bình Dương 098300, Việt Nam",
                            BrandId = 2L,
                            Name = "Chi nhánh D",
                            OperatingLicense = "https://homeontherangepetsit.com/____impro/1/onewebmedia/2023%20Business%20License.jpg?etag=%22133c38-63fb9a14%22&sourceContentType=image%2Fjpeg&ignoreAspectRatio&resize=2000,1256&quality=85",
                            Phone = "0123456789",
                            Status = true,
                            TotalRating = 3f
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.StoreFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreFiles");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.StoreService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CurrentPetOwner")
                        .HasColumnType("int");

                    b.Property<int>("LimitPetOwner")
                        .HasColumnType("int");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreServices");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 1L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8625), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 1L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 13, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8636), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 1L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 17, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8641), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 50,
                            ServiceId = 1L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8645), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 50,
                            ServiceId = 1L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8649), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 50,
                            ServiceId = 1L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8653), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 50,
                            ServiceId = 2L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8657), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 50,
                            ServiceId = 2L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8662), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 50,
                            ServiceId = 2L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 10, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8666), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 0,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 25, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 26, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 27, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 13L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 14L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 29, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 15L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 30, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 3L
                        },
                        new
                        {
                            Id = 17L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 25, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 26, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 4L
                        },
                        new
                        {
                            Id = 19L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 27, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 4L
                        },
                        new
                        {
                            Id = 20L,
                            CurrentPetOwner = 0,
                            LimitPetOwner = 100,
                            ServiceId = 3L,
                            StartTime = new DateTimeOffset(new DateTime(2024, 11, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Available",
                            StoreId = 4L
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Tracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Trackings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BookingId = 1L,
                            Description = "test",
                            Status = true,
                            UploadDate = new DateTimeOffset(new DateTime(2024, 11, 18, 3, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8787), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.TrackingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrackingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TrackingId");

                    b.ToTable("TrackingFiles");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("BankNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.VaccineHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("NextVaccineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("PetCurrentWeight")
                        .HasColumnType("float");

                    b.Property<long>("PetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("VaccineDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("VaccineHistories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Vaccine test",
                            Image = "none",
                            Name = "Vaccine 1",
                            NextVaccineDate = new DateTimeOffset(new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            PetCurrentWeight = 4f,
                            PetId = 1L,
                            Status = "Incomplete",
                            VaccineDate = new DateTimeOffset(new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Vaccine test",
                            Image = "none",
                            Name = "Vaccine 2",
                            NextVaccineDate = new DateTimeOffset(new DateTime(2024, 11, 18, 3, 33, 11, 402, DateTimeKind.Unspecified).AddTicks(8391), new TimeSpan(0, 7, 0, 0, 0)),
                            PetCurrentWeight = 4f,
                            PetId = 2L,
                            Status = "Complete",
                            VaccineDate = new DateTimeOffset(new DateTime(2024, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Voucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("QR")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 1L,
                            Balance = 1000000.0
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 2L,
                            Balance = 0.0
                        },
                        new
                        {
                            Id = 3L,
                            AccountId = 3L,
                            Balance = 0.0
                        },
                        new
                        {
                            Id = 4L,
                            AccountId = 6L,
                            Balance = 100000000000.0
                        },
                        new
                        {
                            Id = 5L,
                            AccountId = 7L,
                            Balance = 100000000000.0
                        });
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Booking", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.StoreService", "StoreService")
                        .WithMany()
                        .HasForeignKey("StoreServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("StoreService");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.BookingRating", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.PetOwner", "PetOwner")
                        .WithMany()
                        .HasForeignKey("PetOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PetOwner");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Brand", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Certificate", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Service", "Service")
                        .WithMany("Certificate")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Conversation", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Account", "CloseAccount")
                        .WithMany()
                        .HasForeignKey("CloseAccountId");

                    b.HasOne("FluffyPaw_Domain.Entities.Account", "PoAccount")
                        .WithMany()
                        .HasForeignKey("PoAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.Account", "StaffAccount")
                        .WithMany()
                        .HasForeignKey("StaffAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CloseAccount");

                    b.Navigation("PoAccount");

                    b.Navigation("StaffAccount");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.ConversationMessage", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.ConversationMessage", "ReplyMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyMessageId");

                    b.Navigation("Conversation");

                    b.Navigation("ReplyMessage");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Identification", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.MessageFile", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.ConversationMessage", "ConversationMessage")
                        .WithMany("MessageFiles")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationMessage");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Notification", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Pet", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.BehaviorCategory", "BehaviorCategory")
                        .WithMany()
                        .HasForeignKey("BehaviorCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.PetOwner", "PetOwner")
                        .WithMany()
                        .HasForeignKey("PetOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.PetType", "PetType")
                        .WithMany()
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BehaviorCategory");

                    b.Navigation("PetOwner");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.PetOwner", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.PetType", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.PetCategory", "PetCategory")
                        .WithMany()
                        .HasForeignKey("PetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetCategory");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Report", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.ReportCategory", "ReportCategory")
                        .WithMany()
                        .HasForeignKey("ReportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.Account", "SenderAccount")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.Account", "TargetAccount")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportCategory");

                    b.Navigation("SenderAccount");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Service", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Store", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.StoreFile", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.Store", "Store")
                        .WithMany("StoreFile")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Files");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.StoreService", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Tracking", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.TrackingFile", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FluffyPaw_Domain.Entities.Tracking", "Tracking")
                        .WithMany()
                        .HasForeignKey("TrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Files");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Transaction", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.VaccineHistory", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Voucher", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Wallet", b =>
                {
                    b.HasOne("FluffyPaw_Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationMessages");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.ConversationMessage", b =>
                {
                    b.Navigation("MessageFiles");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Service", b =>
                {
                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("FluffyPaw_Domain.Entities.Store", b =>
                {
                    b.Navigation("StoreFile");
                });
#pragma warning restore 612, 618
        }
    }
}
